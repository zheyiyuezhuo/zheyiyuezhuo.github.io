[{"title":"NAS系统横评","url":"/2022/06/24/NAS%E7%B3%BB%E7%BB%9F%E6%A8%AA%E8%AF%84/","content":"NAS 体验心得自己用过的 NAS 系统\nOMV\nTruenas scale\nUnraid\n\n1. OMV\n优点：\n\n基于 debian，开源免费\n有镜像源，更新方便\n可以支持多种储存模式：raid，zfs，聚合文件系统等\n支持原生 docker，配合 portainer，配置简单\n\n\n缺点：\n\nwebui 一般，不是很美观，配置也不是特别方便\n每个文件系统优化可能没有其他系统单独集成的好\n网桥和 docker 会冲突，造成某一方无法使用\n\n\n\n2. Truenas scale\n优点：\n\n系统基于 debian，开源免费\n支持 ZFS，且有扩容的希望，配置比较多\n可以支持 docker 了，且有社区应用支持\n\n\n缺点：\n\n服务器在国外，正常使用就需要魔法\ndocker 基于 K3S，且社区应用的部署必须要外网环境，比较麻烦\napp 拉取需要魔法才能部署成功\n暂时无法扩容硬盘，未来可能\n配置要求较高，特别是内存\n\n\n\n3. Unraid\n优点：\n\nwebui 颜值高，且还算易用\n每次重启后会使所有直接对系统的修改复原，需要配合 go 文件进行使用\n加盘容易，只要是是小于校验盘容量的盘，可以直接加\n有缓存机制，写入文件时可以先写入缓存盘（ssd）来保存速度\ndocker 部署容易，且应用商店各种 docker 任你选择，而且有很多模板\n\n\n缺点：\n\n需要付费购买\n系统基于某个小众的 Linux，不宜用\nDocker 是部署在一个虚拟硬盘里来使用的，多了可能空间满，需要扩容\n更新慢，几乎一年一次大更新，比如 docker 版本升级等\n每次重启后会使所有直接对系统的修改复原，需要配合 go 文件进行使用\n读写文件时对系统资源消耗大，且读取速度慢\n感觉适用于千兆家庭网络，不适合万兆环境\n往 unraid 写入可以使用 ssd 做缓存，但是 unraid 往电脑复制时无法加速\n一个月一次校验，2 个 12T 盘一次校验 2 天时间，期间复制 10-20m&#x2F;s，像亲戚来了\n下载盘无法设置不参与校验\n\n\n\n\n\n\n\n\t\t\n\t\tvar gitalkConfig = {\"clientID\":\"d597eef3d48c1aee5b58\",\"clientSecret\":\"66bd818e24fe9a4368d8b79912d5b4fc6b6f97af\",\"repo\":\"zheyiyuezhuo/zheyiyuezhuo.github.io\",\"owner\":\"zheyiyuezhuo\",\"admin\":\"zheyiyuezhuo\",\"id\":\"location.href\",\"distractionFreeMode\":false};\n\t    gitalkConfig.id = md5(location.pathname);\n\t\tvar gitalk = new Gitalk(gitalkConfig);\n\t    gitalk.render(\"gitalk-container\");\n\t    ","categories":["学习笔记"],"tags":["NAS","OMV","Unraid","truenas-sclae"]},{"title":"Github部署基于hexo的静态网页","url":"/2022/06/24/Github%E9%83%A8%E7%BD%B2%E5%9F%BA%E4%BA%8Ehexo%E7%9A%84%E9%9D%99%E6%80%81%E7%BD%91%E9%A1%B5/","content":"hexo 的安装安装 gitGit Protable 配置\n\n下载git，可以下载便携版\n设置 windows 环境变量\n创建.config 目录\n里面创建.gitconfig\n里面填写\n\n\n\n配置 git 与 github 通信\nshell 输入：\n\ngit config --global user.name &quot;用户名&quot;git config --global user.email &quot;邮箱&quot;ssh-keygen -t rsa -C &quot;邮箱&quot;\n\n\n复制 ssh 密钥将C:\\Users\\&#123;name&#125;\\.ssh\\id_rsa.pub的内容复制到Github 的新建 ssh 密钥上\n\n验证shell 输入ssh git@github.com如果需要就写yes，直到输入\n\n\nHi zheyiyuezhuo! You&#x27;ve successfully authenticated, but GitHub does not provide shell access.Connection to github.com closed.\n\n\n申请 tokens进入github点击Generate new token，选择需要的选项勾选 ✔，复制生成的密钥ghp_xxx123456\n\n安装 nodejs\n下载node\n可选择Binary(.zip)，只需要添加环境变量\n\n安装 hexo\n使用命令安装：npm install hexo-cli -g\nhexo 安装在 node 目录下的node_modules文件夹下\n将 Hexo 所在的目录的node_modules添加到环境变量\n就可以直接在 cmd 正常使用 hexo 命令\n卸载：npm uninstall hexo-cli -g\n\nnpm 无法连接服务器国内由于网络原因可能无法连上 npm 的服务器，此时需要设置代理\n\n首先查看 npm 是否有代理存在\n输入：npm config ls -l\n查看所有配置，注意proxy选项\n\n\nnpm 默认没有设置代理，为null，需要为他设置代理才能下载插件，\nnpm 设置代理方式有好几种，点击链接查看\n我使用设置用户配置文件的方式来修改代理，这样感觉方便管理（删除）\n输入：config get userconfig\n查看.npmrc的位置\n\n\n修改.npmrc，如该目录下没有该文件\n在该目录下创建.npmrc，在里面填写\n\n\n\nproxy=你的反向代理地址https-proxy=http://127.0.0.1:1080\n\n\nnpm config list：查看配置更改\n输入：npm config ls -l\n再次查看所有配置，注意proxy选项\n\n\n\nhexo 的配置在想要的文件夹下点击 cmd 输入：hexo init\n文件夹内目录如下：\n.├── _config.yml # 网站的 配置 信息├── package.json # 应用程序的信息├── scaffolds # 模版 文件夹├── source # 资源文件夹是存放用户资源的地方|   ├── _drafts|   └── _posts└── themes # 主题 文件夹\n\n安装发布插件在 hexo 根目录下 shell 输入：npm install hexo-deployer-git --save\n安装主题\n使用命令安装npm install hexo-theme-kaze\n在./themes下输入git clone https://github.com/theme-kaze/hexo-theme-kaze.git，并且将hexo-theme-kaze重命名为kaze\n修改./_config.yml文件，将主题修改为theme: kaze\n\nhexo 主题\nhexo-theme-paperbox\n\ndemo\n\n\nhexo-theme-kaze\ndemo\n\n\n\nhexo-theme-icarus\ndemo\n\n\n\nhexo-theme-Claudia\ndemo\n\n\n\n\n安装 rss我用的是hexo-generator-feed插件\n安装hexo-generator-feed\nnpm install hexo-generator-feed --save\n\n在_config.yml 里添加\nplugin:  - hexo-generator-feedfeed:  enable: true  type:    - atom    - rss2  path:    - atom.xml    - rss2.xml  limit: 20  hub:  content: true  content_limit: 140  content_limit_delim: &quot; &quot;  order_by: -date  icon: icon.png  autodiscovery: true  template:\n\n然后使用hexo g生成atom.xml文件就好\n安装评论系统我用的是hexo-plugin-gitalk插件，他是基于gitalk，利用 github 自带的issues功能实现的。\n首先，选择一个公共 github 存储库（已存在或创建一个新的 github 存储库）用于存储评论，然后需要创建GitHub Application，如果没有点击这里申请，Authorization callback URL 填写当前使用插件页面的域名。\n创建GitHub Application\nApplication name：hexo-gitalk\n\n填写应用程序名称，随意\n\nHomepage URL：https://zheyiyuezhuo.github.io\n\n应用程序主页的完整 URL\n\nApplication description：随意\n\n描述随意填写\n\nAuthorization callback URL：https://zheyiyuezhuo.github.io\n\n填写当前使用插件页面的域名。\n\n点击Register application获取，在生成的页面复制clientID和clientSecret\n安装gitalk（可能需要）\nnpm i --save gitalk\n\n安装hexo-plugin-gitalk\nnpm install hexo-plugin-gitalk --save\n\n在_config.yml 最后面添加\ngitalk:  clientID: GitHub Application Client ID.  clientSecret: GitHub Application Client Secret.  repo: GitHub repository，比如：zheyiyuezhuo.github.io  owner: GitHub repository 所有者，比如：zheyiyuezhuo  admin: 对这个 repository 有写权限的用户，比如：zheyiyuezhuo  id: location.href  distractionFreeMode: false\n\nhexo 的使用创建新页面hexo n &quot;&lt;title&gt;&quot;hexo new &quot;&lt;title&gt;&quot;\n\n本地查看hexo shexo server\n\n生成静态页面hexo ghexo generate\n\n部署&#x2F;发布hexo dhexo deploy\n\n第一次部署的时候需要选择证书模式\n证书助手选择器选择凭据帮助器&lt;无助手&gt;缓存store # 将凭据保存在磁盘上，长久有效；Wincedmanager-corel\n\n建议选择默认的，别像图中勾选总是就好\n\n\n\n\n\t\t\n\t\tvar gitalkConfig = {\"clientID\":\"d597eef3d48c1aee5b58\",\"clientSecret\":\"66bd818e24fe9a4368d8b79912d5b4fc6b6f97af\",\"repo\":\"zheyiyuezhuo.github.io\",\"owner\":\"zheyiyuezhuo\",\"admin\":[\"zheyiyuezhuo\"],\"id\":\"location.href\",\"distractionFreeMode\":false};\n\t    gitalkConfig.id = md5(location.pathname);\n\t\tvar gitalk = new Gitalk(gitalkConfig);\n\t    gitalk.render(\"gitalk-container\");\n\t    ","categories":["学习笔记","其他"],"tags":["hexo","博客部署"]}]